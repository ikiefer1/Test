//List.cpp
//Isaiah Kiefer
#include <iostream>
#include "Hash.h"
#include <string>

using std::string;
using std::endl;
using std::cout;
#ifndef LIST_HC
#define LIST_HC
template<class T>
myHash<T>::myHash()
{
	hash = new T[HashSize];
	size = 0;
	for (int i = 0; i < HashSize; i++)
	{
		hash[i] = "";
	}

}
template<class T>
myHash<T>::~myHash()
{
	delete[] hash;
}
template<class T>
void myHash<T>::insertHash(T item)
{
	int key = findHash(item);
	int att = 0;
	if (hash[key] == "") 
	{
		hash[key] = item;
		size++;
	}
	else {
		bool found = false;
		while (!found) 
		{
			att++;
			key += att * att;
			if (key > HashSize)
			{
				key = key - HashSize;
			}
			
			if (hash[key] == "") 
			{
				hash[key] = item;
				size++;
				found = true;
			}
		}
	}
}
template<class T>
int myHash<T>::find(string word)
{
	long long int num = 0;
	for (int i = 0; i <= word.size(); i++)
	{
		num += (int)word[i] * ((i+1) * (i+1));
	}
	return num % HashSize;

}
template<class T>
bool myHash<T>::findHash(T item)
{
	int key = findHash(item);
	int att = 0;
	if (hash[key].compare(item) == 0)
	{     //found it
		sp++;
		tmpC++;
		foundC += tmpC;
		tmpC = 0;
		return true;
	}
	else if (hash[key].compare("") == 0) 
	{
		notSp++;
		tmpC++;
		notC += tmpC;
		tmpC = 0;
		word.push_back(item);
		return false;
	}
	else
	{
		bool found = false;
		while (!found) 
		{
			tmpC++;
			att++;
			key += att * att; //linear probing
			if (key > HashSize)
			{
				key = key - HashSize;
			}
			if (hash[key].compare(item) == 0) 
			{
				sp++;
				foundC += tmpC;
				tmpC = 0;
				return true; // or found = true;
			}
			else if (hash[key].compare("") == 0) 
			{
				notSp++;
				notC += tmpC;
				tmpC = 0;
				word.push_back(item);
				return false;
			}
		}		
	}
	return false;
}


#endif
